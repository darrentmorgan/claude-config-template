name: PR Testing & Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper blame/diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate TypeScript compilation
        run: |
          cd scripts
          npx tsc --noEmit
        continue-on-error: false

      - name: Run TypeScript type checking (project-wide)
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "No root tsconfig.json found, skipping project-wide type check"
          fi
        continue-on-error: false

      - name: Validate hook scripts syntax
        run: |
          echo "Validating shell scripts..."
          for script in hooks/*.sh scripts/*.sh; do
            if [ -f "$script" ]; then
              echo "Checking: $script"
              bash -n "$script" || exit 1
            fi
          done

      - name: Run tests
        id: test
        run: |
          # Run tests if test script exists
          if npm run test --if-present; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate JSON configuration files
        run: |
          echo "Validating JSON files..."
          find .claude -name "*.json" -type f -exec sh -c '
            for file; do
              echo "Validating: $file"
              if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo "Invalid JSON: $file"
                exit 1
              fi
            done
          ' sh {} +

      - name: Check for required files
        run: |
          echo "Checking required project files..."
          required_files=(
            ".claude/agents/delegation-map.json"
            ".claude/settings.local.json"
            "package.json"
            "hooks/pre-commit.sh"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done

      - name: Generate test report
        if: always()
        env:
          TEST_STATUS: ${{ steps.test.outputs.tests_passed }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          STATUS_EMOJI="✅ Passed"
          if [ "$TEST_STATUS" != "true" ]; then
            STATUS_EMOJI="❌ Failed"
          fi

          cat > test-report.md << 'EOF'
          # Test Results

          **Status**: ${STATUS_EMOJI}
          **Commit**: ${COMMIT_SHA}
          **Branch**: ${PR_BRANCH}

          ## Checks Performed
          - TypeScript compilation (scripts)
          - Shell script syntax validation
          - JSON configuration validation
          - Required files check
          - Test suite execution
          EOF

          # Replace environment variables
          sed -i "s/\${STATUS_EMOJI}/$STATUS_EMOJI/g" test-report.md
          sed -i "s/\${COMMIT_SHA}/$COMMIT_SHA/g" test-report.md
          sed -i "s/\${PR_BRANCH}/$PR_BRANCH/g" test-report.md

      - name: Comment test results on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('# Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Fail if tests failed
        if: steps.test.outputs.tests_passed != 'true'
        run: exit 1

  security-scan:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: audit
        run: |
          npm audit --audit-level=moderate || echo "audit_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Check for secrets in code
        run: |
          echo "Scanning for potential secrets..."
          # Basic pattern matching for common secrets
          if git diff origin/main...HEAD | grep -iE '(api[_-]?key|secret|password|token|private[_-]?key).*=.*["\047][a-zA-Z0-9]{16,}'; then
            echo "⚠️ Warning: Potential secrets detected in diff"
            echo "Please review changes for hardcoded credentials"
            exit 1
          fi

      - name: Comment security results
        if: steps.audit.outputs.audit_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ **Security Alert**: npm audit found vulnerabilities. Please run `npm audit` locally and fix issues before merging.'
            });
